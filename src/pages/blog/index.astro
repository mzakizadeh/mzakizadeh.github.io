---
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/base/Header.astro";
import FormattedDate from "../../components/blog/FormattedDate.astro";
import { getCollection } from "astro:content";
import { MY_NAME, SITE_DESCRIPTION } from "../../consts";

const posts = await Astro.glob("../../content/blog/*.{md,mdx}");

// Group posts by year
const postsByYear = posts.reduce((acc, post) => {
    const year = new Date(post.frontmatter.pubDate).getFullYear();
    if (!acc[year]) {
        acc[year] = [];
    }
    acc[year].push(post);
    return acc;
}, {});

// Sort years in descending order
const sortedYears = Object.keys(postsByYear).sort(
    (a, b) => parseInt(b) - parseInt(a),
);
---

<Layout title={MY_NAME} description={SITE_DESCRIPTION}>
    <main>
        <Header />
        <section class="posts">
            {
                sortedYears.map((year) => (
                    <div class="year-section">
                        <h2 class="year-header">{year} Â¬</h2>
                        <ul>
                            {postsByYear[year]
                                .sort(
                                    (
                                        a: (typeof posts)[0],
                                        b: (typeof posts)[0],
                                    ) =>
                                        new Date(
                                            b.frontmatter.pubDate,
                                        ).getTime() -
                                        new Date(
                                            a.frontmatter.pubDate,
                                        ).getTime(),
                                )
                                .map((post: (typeof posts)[0]) => (
                                    <li>
                                        <a
                                            href={`/blog/${post.frontmatter.slug}/`}
                                        >
                                            <div class="mobile-meta">
                                                <span class="date">
                                                    {(() => {
                                                        const date = new Date(
                                                            post.frontmatter.pubDate,
                                                        );
                                                        const month =
                                                            new Intl.DateTimeFormat(
                                                                "en",
                                                                {
                                                                    month: "short",
                                                                },
                                                            ).format(date);
                                                        const day = date
                                                            .getDate()
                                                            .toString()
                                                            .padStart(2, "0");
                                                        return `[${month} ${day}]`;
                                                    })()}
                                                </span>
                                                <span class="read-time">
                                                    {
                                                        post.frontmatter
                                                            .minutesRead
                                                    }
                                                </span>
                                            </div>
                                            <span class="date desktop-date">
                                                {(() => {
                                                    const date = new Date(
                                                        post.frontmatter.pubDate,
                                                    );
                                                    const month =
                                                        new Intl.DateTimeFormat(
                                                            "en",
                                                            {
                                                                month: "short",
                                                            },
                                                        ).format(date);
                                                    const day = date
                                                        .getDate()
                                                        .toString()
                                                        .padStart(2, "0");
                                                    return `[${month} ${day}]`;
                                                })()}
                                            </span>
                                            <span class="title">
                                                {post.frontmatter.title}
                                            </span>
                                            <span class="read-time desktop-read-time">
                                                {post.frontmatter.minutesRead}
                                            </span>
                                        </a>
                                    </li>
                                ))}
                        </ul>
                    </div>
                ))
            }
        </section>
    </main>
</Layout>
<style>
    ul {
        list-style-type: none;
        margin: 0;
        padding: 0;
        width: 100%;
    }
    ul li {
        margin-bottom: 0.5rem;
        width: 100%;
    }
    ul li a {
        display: flex;
        align-items: center;
        text-decoration: none;
        color: #ffffff;
        font-size: 1rem;
        padding: 0.25rem 0;
        transition: color 0.2s ease;
    }
    ul li a:hover {
        color: var(--primary);
    }
    .date {
        color: var(--primary);
        min-width: 5rem;
        margin-right: 0.1rem;
        font-size: 0.9rem;
        flex-shrink: 0;
    }
    .title {
        flex: 1;
        font-size: 1rem;
        font-weight: normal;
        line-height: 1.4;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
    .read-time {
        color: #ffffff;
        font-size: 0.9rem;
        margin-left: 0.6rem;
        flex-shrink: 0;
    }
    .year-section {
        margin-bottom: 3rem;
    }
    .year-header {
        font-size: 1.2rem;
        font-weight: 600;
        color: #ffffff;
        margin: 0 0 0.5rem 0;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    /* Desktop layout - hide mobile elements */
    .mobile-meta {
        display: none;
    }

    @media (max-width: 720px) {
        .posts {
            max-width: 100%;
        }
        .year-section {
            margin-bottom: 2rem;
        }
        ul li {
            margin-bottom: 0.75rem;
        }
        ul li a {
            flex-direction: column;
            align-items: flex-start;
            padding: 0.5rem 0;
        }

        /* Hide desktop elements on mobile */
        .desktop-date,
        .desktop-read-time {
            display: none;
        }

        /* Show mobile elements */
        .mobile-meta {
            display: flex;
            align-items: center;
            margin-bottom: 0.25rem;
            width: 100%;
        }
        .mobile-meta .date {
            margin-right: 1rem;
            margin-bottom: 0;
            font-size: 0.85rem;
            min-width: auto;
        }
        .mobile-meta .read-time {
            font-size: 0.85rem;
            margin-left: 0;
        }
        .title {
            width: 100%;
            margin-bottom: 0;
            font-size: 0.95rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
    }
</style>
